// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BaseSolution.Features.ExtractionRules
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ValidateExtractionRules")]
    public partial class ValidateExtractionRulesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ValidateExtractionRule.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-UK"), "ValidateExtractionRules", "\tIn order to validate an extraction rule\r\n\tAs an end user\r\n\tI want to be able to " +
                    "enter incorrect data so that the validation is prompted", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line 8
    testRunner.Given("I have navigated to \'demo.activenavigation.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I click on \'Add Extraction Rule\' link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate Extraction Rule input form by not entering any data")]
        public virtual void ValidateExtractionRuleInputFormByNotEnteringAnyData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Extraction Rule input form by not entering any data", null, ((string[])(null)));
#line 11
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 12
 testRunner.When("I save the Extraction Rule without any data input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field"});
            table1.AddRow(new string[] {
                        "Name"});
            table1.AddRow(new string[] {
                        "Type"});
            table1.AddRow(new string[] {
                        "Data Type"});
#line 13
 testRunner.Then("I should get an error message stating that the fields are required for the follow" +
                    "ing:", ((string)(null)), table1, "Then ");
#line 18
 testRunner.And("I update the Add Extraction Rule field \'Masking\' with values \'Please select,\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.When("I save the Extraction Rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Masking Error Text"});
            table2.AddRow(new string[] {
                        "Part to mask",
                        "You must select which part of the extraction rule value you would like to mask."});
            table2.AddRow(new string[] {
                        "Mask size (%)",
                        "You must select a percentage of the value to be masked between 1 and 100."});
#line 20
 testRunner.Then("I should get an error message for the following fields:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate Extraction Rule Mask Size must be a percentage figure")]
        public virtual void ValidateExtractionRuleMaskSizeMustBeAPercentageFigure()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Extraction Rule Mask Size must be a percentage figure", null, ((string[])(null)));
#line 25
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 26
 testRunner.And("I click on the masking checkbox", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Masking Field",
                        "Error Value"});
            table3.AddRow(new string[] {
                        "Left,101",
                        "Value must be between 1 and 100"});
            table3.AddRow(new string[] {
                        "Left,0.99",
                        "Value must be between 1 and 100"});
            table3.AddRow(new string[] {
                        "Left, sometext",
                        "Value must be numeric"});
            table3.AddRow(new string[] {
                        "Right, -1",
                        "Value must be between 1 and 100"});
#line 27
    testRunner.And("I update the Masking field:", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate cannot add an Extraction Rule without a Pattern")]
        public virtual void ValidateCannotAddAnExtractionRuleWithoutAPattern()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate cannot add an Extraction Rule without a Pattern", null, ((string[])(null)));
#line 34
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 35
 testRunner.And("I update the Add Extraction Rule field \'Type\' with the drop-down value of \'Conten" +
                    "t Pattern Match\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
    testRunner.When("I save the Extraction Rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Error Text"});
            table4.AddRow(new string[] {
                        "Pattern",
                        "A valid regular expression is required. CR and LF should be matched using \\r and " +
                            "\\n patterns"});
#line 37
 testRunner.Then("I should get an error message for the following fields:", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate name field character length cannot exceed 50 characters")]
        public virtual void ValidateNameFieldCharacterLengthCannotExceed50Characters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate name field character length cannot exceed 50 characters", null, ((string[])(null)));
#line 41
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 42
 testRunner.And("I enter the Add Extraction Rule field \'Name\' with the text \'Lorem ipsum dolor sit" +
                    " amet, consectetur adipiscinga\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
    testRunner.When("I save the Extraction Rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Error Text"});
            table5.AddRow(new string[] {
                        "Name",
                        "Max character length is 50"});
#line 44
 testRunner.Then("I should get an error message for the following fields:", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate that you cannot add an Extraction Rule that already exists")]
        public virtual void ValidateThatYouCannotAddAnExtractionRuleThatAlreadyExists()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate that you cannot add an Extraction Rule that already exists", null, ((string[])(null)));
#line 48
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 49
 testRunner.And("I enter the Add Extraction Rule field \'SearchName\' with the text \'_Animals\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
    testRunner.When("I save the Extraction Rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Error Text"});
            table6.AddRow(new string[] {
                        "Name",
                        "Extraction rule name must be unique."});
#line 51
 testRunner.Then("I should get an error message for the following fields:", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
